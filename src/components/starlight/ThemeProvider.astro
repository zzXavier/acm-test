---
import type { Props } from "@astrojs/starlight/props";
import { Icon } from "@astrojs/starlight/components";
import { pwaInfo } from "virtual:pwa-info";

// replaced dynamically
const buildDate = __DATE__;
---

<script>
  import { registerSW } from "virtual:pwa-register";

  registerSW({
    immediate: true,
    onRegisteredSW(swScriptUrl) {
      // eslint-disable-next-line no-console
      console.log("SW registered: ", swScriptUrl);
    },
    onOfflineReady() {
      // eslint-disable-next-line no-console
      console.log("PWA application ready to work offline");
    },
  });
</script>
{pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}

{/* This is intentionally inlined to avoid FOUC. */}
<script is:inline>
window.StarlightThemeProvider = (() => {
  const storedTheme =
    typeof localStorage !== "undefined" &&
    localStorage.getItem("starlight-theme");
  const theme =
    storedTheme ||
    (window.matchMedia("(prefers-color-scheme: light)").matches
      ? "light"
      : "dark");
  document.documentElement.dataset.theme =
    theme === "light" ? "light" : "dark";
  return {
    updatePickers(theme = storedTheme || "auto") {
      document
        .querySelectorAll("starlight-theme-select")
        .forEach((picker) => {
          const select = picker.querySelector("select");
          if (select) select.value = theme;
          /** @type {HTMLTemplateElement | null} */
          const tmpl = document.querySelector(`#theme-icons`);
          const newIcon = tmpl && tmpl.content.querySelector("." + theme);
          if (newIcon) {
            const oldIcon = picker.querySelector("svg.label-icon");
            if (oldIcon) {
              oldIcon.replaceChildren(...newIcon.cloneNode(true).childNodes);
            }
          }
        });
    },
  };
})();
</script>

<template id="theme-icons">
  <Icon name="sun" class="light" />
  <Icon name="moon" class="dark" />
  <Icon name="laptop" class="auto" />
</template>

<span style="display: hidden">Built at: {buildDate}</span>
